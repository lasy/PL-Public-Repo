g_hist_lt
g_hist_lt = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density..), binwidth = 7, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,20*28))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(name = "Cycle label", values = c("tomato","lightgoldenrod3","royalblue1"))+
theme(legend.position = "bottom")
#g_hist_lt
g_hist_st = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density.. ), binwidth = 1, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,150))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(values = c("tomato","lightgoldenrod3","royalblue1"))+
guides(fill = FALSE)
#facet_grid(preg_test_class ~ .)
#g_hist_st
g_inset = ggplotGrob(g_hist_st +
theme(plot.background = element_rect(colour = "gray40")))
g = g_hist_lt + annotation_custom(
grob = g_inset,
xmin = 24*7,
xmax = Inf,
ymin = 0.03,
ymax = Inf
)
g
ggsave(filename = paste0(IO$panels, "cycle or pregnancy duration.pdf"), g, width = 7, height = 5)
g_hist_lt = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density..), binwidth = 7, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,20*28))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(name = "Cycle label", values = c("tomato","lightgoldenrod4","royalblue1"))+
theme(legend.position = "bottom")
#g_hist_lt
g_hist_st = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density.. ), binwidth = 1, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,150))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(values = c("tomato","lightgoldenrod4","royalblue1"))+
guides(fill = FALSE)
#facet_grid(preg_test_class ~ .)
#g_hist_st
g_inset = ggplotGrob(g_hist_st +
theme(plot.background = element_rect(colour = "gray40")))
g = g_hist_lt + annotation_custom(
grob = g_inset,
xmin = 24*7,
xmax = Inf,
ymin = 0.03,
ymax = Inf
)
g
ggsave(filename = paste0(IO$panels, "cycle or pregnancy duration.pdf"), g, width = 7, height = 5)
j = which(cycles$preg_test_class == "pregnant")
g = ggplot(cycles[j,], aes(x = preg_outcome, fill = preg_outcome)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
xlab("Pregnancy outcome")+ ylab("% cycles")+
scale_fill_manual(values = dict$pregnancy_timeline$colors)+
scale_y_continuous(labels=percent)+
guides(fill = FALSE)
g
ggsave(filename = paste0(IO$panels, "pregnancy outcomes.pdf"), g, width = 5, height = 5)
load(file = paste0(IO$output_data,"users.Rdata"), verbose = TRUE)
users$any_PL = ifelse(users$n_PL>0, TRUE, ifelse(users$n_LB>0,FALSE,NA))
u = users[which(!is.na(users$any_PL)),]
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(col = NA, alpha = 0.5, position = "identity", binwidth = 1)
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_s)
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_m)
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)
viz$xaxis_j = c(seq(0,91,by = 7), 120, 180, 210, 240, 270, 300 )
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss")+
xlab("median cycle length before first positive preg. test")
users$any_PL = ifelse(users$n_PL>0, "Yes", ifelse(users$n_LB>0,"No",NA))
u = users[which(!is.na(users$any_PL)),]
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss")+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","tomato"))+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","fire"))+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "bottom")
ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "median_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
cycles_tmp = cycles
users_agg = suppressWarnings(
ddply(cycles,
.(user_id),
.fun = summarize,
n_cycles = max(cycle_nb, na.rm = TRUE),
n_days_obs = sum(n_days_obs, na.rm = TRUE),
n_pos_cycles = sum(n_pos_preg_test > 0, na.rm = TRUE),
first_cycle_preg = min(cycle_nb[n_pos_preg_test > 0], na.rm = TRUE))
)
users_agg$first_cycle_preg[is.infinite(users_agg$first_cycle_preg)] =  0
cycles_tmp = cycles
cycles_tmp$first_cycle_preg = users_agg$first_cycle_preg[match(cycles_tmp$user_id, users_agg$user_id)]
users_agg2 = aggregate(cycle_length ~ user_id,
cycles_tmp[cycles_tmp$cycle_nb < cycles_tmp$first_cycle_preg,  ],
min, na.rm = TRUE)
dim(users_agg2)
head(users_agg2)
hist(users_agg2$cycle_length)
hist(users_agg2$cycle_length, breaks = 100)
abline(v = 18)
abline(v = 15)
users_agg$shortest_cycle_before_first_pos_preg = users_agg2$cycle_length[match(users_agg$user_id, users_agg2$user_id)]
column_names = colnames(users_agg)
column_names = column_names[-which(column_names %in% colnames(users))]
column_names
m = match(users$user_id, users_agg$user_id)
for(column  in column_names){
eval(parse(text = paste0("users$",column,"= users_agg$",column,"[m]")))
}
save(users, file = paste0(IO$output_data,"users.Rdata"))
file.copy(from = paste0(IO$output_data,"users.Rdata"), to = paste0(IO$tmp_data,"users_with_agg.Rdata"), overwrite = TRUE
)
j = which(
(users$first_cycle_preg >= 5)&
(users$shortest_cycle_before_first_pos_preg > 15) &
((users$n_cycles_after_first_preg >=2) | (users$n_days_obs_after_first_preg >= 20)))
length(j)
dim(users)
source("Scripts/00_setup.R")
days_input_folder = paste0(IO$output_data,"Days/")
days_files = list.files(days_input_folder)
days_files
file = days_files[1]
load(paste0(days_input_folder,file), verbose = TRUE)
colnames(days)
dim(days)
d = duplicated(days)
j = which(d)
length(j)>0
days = days[-j,]
dim(days)
unique(days$first_day)
load(paste0(IO$tmp_data,"Days_Rdata_from_csv/day0.Rdata"))
head(days)
load(paste0(IO$output_data, "users.Rdata"), verbose = TRUE)
dim(users)
colnames(users)
load(paste0(IO$output_data, "cycles.Rdata"), verbose = TRUE)
sum(users$n_cycles)
nrow(cycles)
colnames(cycles)
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = cbind(table_1, data.frame(Attribute = "Number of cycles", Value = sum(users$n_cycles)) )
table_1 = cbind(table_1, data.frame(Attribute = "Number of cycles per users", Value = paste0(mean(users$n_cycles)," +- ", sd(users$n_cycles), "(mean +- sd)")  ))
table_1
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users", Value = paste0(mean(users$n_cycles)," +- ", sd(users$n_cycles), "(mean +- sd)")  ))
table_1
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users", Value = paste0(round(mean(users$n_cycles),2)," +- ", round(sd(users$n_cycles),2), "(mean +- sd)")  ))
table_1
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users", Value = paste0(round(mean(users$n_cycles),2)," ± ", round(sd(users$n_cycles),2), "(mean ± sd)")  ))
table_1
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users", Value = paste0(round(mean(users$n_cycles),2),"(mean) ± ", round(sd(users$n_cycles),2), " (sd)")  ))
table_1
agg = ddply(cycles,
.(user_id),
.fun = summarise,
earliest_date = min(start_date),
latest_date = max(end_date))
dim(agg)
dim(users)
head(agg)
unique(agg$latest_date)
agg = ddply(cycles,
.(user_id),
.fun = summarise,
earliest_date = min(start_date),
latest_date = max(end_date, na.rm = TRUE))
head(agg)
unique(agg$latest_date)
m = match(users$user_id, agg$user_id)
users$earliest_date = agg$earliest_date[m]
users$latest_date = agg$latest_date[m]
users$app_usage_duration_in_days = users$latest_date - users$earliest_date
head(users$app_usage_duration_in_days)
users$app_usage_duration_in_days = as.numeric(users$latest_date - users$earliest_date)
users$app_usage_duration_in_days
hist(users$app_usage_duration_in_days)
summary()
summary(users$app_usage_duration_in_days)
users$app_usage_duration_in_days = as.numeric(users$latest_date - users$earliest_date)
3*365
4*365
ggplot(users, aes(x = app_usage_duration_in_days)) +
geom_histogram(binwidth = 30)+
xlim(c(0,4*365))
ggplot(users, aes(x = app_usage_duration_in_days)) +
geom_histogram(binwidth = 30)+
xlim(c(0,10*365))
2000/365
agg = ddply(cycles,
.(user_id),
.fun = summarise,
earliest_date = start_date[order(start_date)][2],
latest_date = max(end_date, na.rm = TRUE))
m = match(users$user_id, agg$user_id)
users$earliest_date = agg$earliest_date[m]
users$latest_date = agg$latest_date[m]
users$app_usage_duration_in_days = as.numeric(users$latest_date - users$earliest_date)
ggplot(users, aes(x = app_usage_duration_in_days)) +
geom_histogram(binwidth = 30)+
xlim(c(0,10*365))
mean(users$app_usage_duration_in_days)
sd(users$app_usage_duration_in_days)
users[which.max(users$app_usage_duration_in_days),]
hist(users$earliest_date)
ggplot(users, aes(x = earliest_date)) +
geom_histogram(binwidth = 1)
sort(table(users$earliest_date))
sort(table(year(users$earliest_date)))
table(year(users$earliest_date))
users$earliest_date[which(users$earliest_date < as.Date("2012-01-01"))] = NA
table(year(users$earliest_date))
users$app_usage_duration_in_days = as.numeric(users$latest_date - users$earliest_date)
ggplot(users, aes(x = app_usage_duration_in_days)) +
geom_histogram(binwidth = 30)+
xlim(c(0,10*365))
users$app_usage_duration_in_years = users$app_usage_duration_in_days /365
ggplot(users, aes(x = app_usage_duration_in_years)) +
geom_histogram(binwidth = 1/12)
save(users, file = paste0(IO$output_data, "users.Rdata"))
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users (mean ± sd) ",
Value = paste0(round(mean(users$n_cycles),2)," ± ",
round(sd(users$n_cycles),2)) ))
table_1 = cbind(table_1, data.frame(Attribute = "Tracking duration per user [in years] (mean ± sd)",
Value = paste0(round(mean(users$app_usage_duration_in_years),2)," ± ",
round(sd(users$app_usage_duration_in_years),2)) ))
table_1
table_1 = rbind(table_1, data.frame(Attribute = "Tracking duration per user [in years] (mean ± sd)",
Value = paste0(round(mean(users$app_usage_duration_in_years),2)," ± ",
round(sd(users$app_usage_duration_in_years),2)) ))
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users (mean ± sd) ",
Value = paste0(round(mean(users$n_cycles),2)," ± ",
round(sd(users$n_cycles),2)) ))
table_1 = rbind(table_1, data.frame(Attribute = "Tracking duration per user [in years] (mean ± sd)",
Value = paste0(round(mean(users$app_usage_duration_in_years),2)," ± ",
round(sd(users$app_usage_duration_in_years),2)) ))
table_1
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users (mean ± sd) ",
Value = paste0(round(mean(users$n_cycles),2)," ± ",
round(sd(users$n_cycles),2)) ))
table_1 = rbind(table_1, data.frame(Attribute = "Tracking duration per user [in years] (mean ± sd)",
Value = paste0(round(mean(users$app_usage_duration_in_years, na.rm = TRUE),2)," ± ",
round(sd(users$app_usage_duration_in_years, na.rm = TRUE),2)) ))
table_1
g_hist_lt = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density..), binwidth = 7, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,20*28))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(name = "Cycle label", values = c("tomato","lightgoldenrod4","royalblue1"))+
theme(legend.position = "bottom")
#g_hist_lt
g_hist_st = ggplot(cycles, aes(x = cycle_length, fill = preg_test_class)) +
geom_vline(xintercept = dict$pregnancy_timeline$duration_in_days, col = "gray", linetype = 2)+
geom_histogram(aes(y = ..density.. ), binwidth = 1, position = "identity", alpha = 0.5)+
scale_x_continuous(breaks = viz$xaxis_m*28, minor_breaks = viz$xaxis_s*7,
labels = viz$xaxis_m*4, limits = c(0,150))+
ylab("density")+ xlab("cycle or pregnancy duration (in weeks)")+ # ylab("% of cycles")
scale_fill_manual(values = c("tomato","lightgoldenrod4","royalblue1"))+
guides(fill = FALSE)
#facet_grid(preg_test_class ~ .)
#g_hist_st
g_inset = ggplotGrob(g_hist_st +
theme(plot.background = element_rect(colour = "gray40")))
g = g_hist_lt + annotation_custom(
grob = g_inset,
xmin = 24*7,
xmax = Inf,
ymin = 0.03,
ymax = Inf
)
g
ggsave(filename = paste0(IO$panels, "cycle or pregnancy duration.pdf"), g, width = 7, height = 5)
j = which(cycles$preg_test_class == "pregnant")
g = ggplot(cycles[j,], aes(x = preg_outcome, fill = preg_outcome)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
xlab("Pregnancy outcome")+ ylab("% cycles")+
scale_fill_manual(values = dict$pregnancy_timeline$colors)+
scale_y_continuous(labels=percent)+
guides(fill = FALSE)
g
ggsave(filename = paste0(IO$panels, "pregnancy outcomes.pdf"), g, width = 5, height = 5)
users$any_PL = ifelse(users$n_PL>0, "Yes", ifelse(users$n_LB>0,"No",NA))
u = users[which(!is.na(users$any_PL)),]
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "median_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j, limits = range(viz$xaxis_j))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "median_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(0,91))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(14,91))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "median_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
g = ggplot(u, aes(x = cycle_length_before_preg_sd, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j)+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("standard deviation in cycle length before 1st pos. preg. test")+
theme(legend.position = "top")
g
g = ggplot(u, aes(x = cycle_length_before_preg_sd, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(0,70))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("standard deviation in cycle length before 1st pos. preg. test")+
theme(legend.position = "top")
g
g = ggplot(u, aes(x = cycle_length_before_preg_sd, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 0.5)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(0,70))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("standard deviation in cycle length before 1st pos. preg. test")+
theme(legend.position = "top")
g
g = ggplot(u, aes(x = cycle_length_before_preg_sd, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 0.5)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(0,42))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("standard deviation in cycle length before 1st pos. preg. test")+
theme(legend.position = "top")
g
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == TRUE)], y = u$cycle_length_before_preg_sd[which(u$any_PL == FALSE)])
range(u$cycle_length_before_preg_sd[which(u$any_PL == TRUE)])
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")], y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")])
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")],
pch = 16, cex = 0.5)
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")],
pch = 16, cex = 0.5, col = rgb(0,0,0,0.3))
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")],
pch = 16, cex = 0.5, col = rgb(0,0,0,0.3),
xlim = c(0,200), ylim = c(0,200))
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")],
pch = 16, cex = 0.5, col = rgb(0,0,0,0.3),
xlim = c(0,100), ylim = c(0,100))
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_sd[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_sd[which(u$any_PL == "No")],
pch = 16, cex = 0.5, col = rgb(0,0,0,0.3),
xlim = c(0,50), ylim = c(0,50))
abline(a = 0, b = 1)
qqplot(x=  u$cycle_length_before_preg_median[which(u$any_PL == "Yes")],
y = u$cycle_length_before_preg_median[which(u$any_PL == "No")],
pch = 16, cex = 0.5, col = rgb(0,0,0,0.3),
xlim = c(0,91), ylim = c(0,91))
abline(a = 0, b = 1)
g = ggplot(u, aes(x = cycle_length_before_preg_sd, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 0.5)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(0,42))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("standard deviation in cycle length before 1st pos. preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "sd_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
g = ggplot(u, aes(x = cycle_length_before_preg_median, fill = any_PL))+
geom_histogram(aes(y = ..density..), col = NA, alpha = 0.5, position = "identity", binwidth = 1)+
scale_x_continuous(breaks = viz$xaxis_j, limits = c(14,70))+
scale_fill_manual(name = "experienced any preg. loss", values = c("blue","red"))+
xlab("median cycle length before first positive preg. test")+
theme(legend.position = "top")
g
ggsave(filename = paste0(IO$panels, "median_cycle_length_before_first_preg.pdf"), g, width = 5, height = 5)
colnames(users)
table_1 = data.frame(Attribute = "Number of users", Value = nrow(users))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of cycles", Value = sum(users$n_cycles)) )
table_1 = rbind(table_1, data.frame(Attribute = "Number of cycles per users (mean ± sd) ",
Value = paste0(round(mean(users$n_cycles),2)," ± ",
round(sd(users$n_cycles),2)) ))
table_1 = rbind(table_1, data.frame(Attribute = "Tracking duration per user [in years] (mean ± sd)",
Value = paste0(round(mean(users$app_usage_duration_in_years, na.rm = TRUE),2)," ± ",
round(sd(users$app_usage_duration_in_years, na.rm = TRUE),2)) ))
table_1 = rbind(table_1, data.frame(Attribute = "Total number of positive preg. tests", Value = sum(users$n_pos_cycles)) )
table_1
write.csv(table_1, file = paste0(IO$tables,"dataset_info.csv"))
table(users_preg_outcome$n_LB, users_preg_outcome$n_PL)
head(users)
table(users$n_LB, users$n_PL)
table(users$n_LB)
table(users$n_PL)
j = which((users$n_LB + users$n_PL)>0)
table(users$n_LB[j], users$n_PL[j])
table(users$n_LB[j])
round(table(users$n_LB[j])/sum(table(users$n_LB[j])) * 100, 2)
table(users$n_PL[j])
round(table(users$n_PL[j])/sum(table(users$n_PL[j])) * 100, 2)
round(table(users$n_LB[j])/sum(table(users$n_LB[j])) * 100, 2)
round(table(users$n_PL[j])/sum(table(users$n_PL[j])) * 100, 2)
round(table(users$n_LB[j])/sum(table(users$n_LB[j])) * 100, 2)
table(cycles$preg_outcome[j])
j = which(cycles$preg_test_class == "pregnant")
table(cycles$preg_outcome[j])
table(cycles$preg_outcome[j])/sum(table(cycles$preg_outcome[j]))
round(table(cycles$preg_outcome[j])/sum(table(cycles$preg_outcome[j])) * 100 ,2)
0.24581821124.58+8.8
24.58+ 8.8
0.80+1.27+9.96
x = round(table(cycles$preg_outcome[j])/sum(table(cycles$preg_outcome[j])) * 100 ,2)
x
(x[2]+x[3] )/ x[2:7]
(x[2]+x[3] )/ sum(x[2:7])
source("Scripts/00_setup.R")
load(paste0(IO$output_data,"days.Rdata"), verbose = TRUE)
dim(days)
lu(days$user_id)
