g = graph_from_adjacency_matrix(hsmm_b$trans, weighted = TRUE, mode = "directed")
E(g)$width <- 1+E(g)$weight*5
plot(g,# edge.arrow.size=0.75,
vertex.size=30, vertex.frame.color="white",
vertex.label.color="white", vertex.label.family  = "sans",
vertex.color = hsmm_b$states$colors[match(V(g)$name,  hsmm_b$states$abbr)],
layout = hsmm_b$states$l
)
hsmm_b$states$l =
matrix(c(0,1, #M
1,1, #C
0,0 #LBI
),
byrow = TRUE,
ncol = 2
)
g = graph_from_adjacency_matrix(hsmm_b$trans, weighted = TRUE, mode = "directed")
E(g)$width <- 1+E(g)$weight*5
plot(g,# edge.arrow.size=0.75,
vertex.size=30, vertex.frame.color="white",
vertex.label.color="white", vertex.label.family  = "sans",
vertex.color = hsmm_b$states$colors[match(V(g)$name,  hsmm_b$states$abbr)],
layout = hsmm_b$states$l
)
hsmm_b$states$emis_bleeding_mean = c(0.5,0,0)
hsmm_b$states$emis_bleeding_sigma = c(0.5,0.2,0.1)
hsmm_b$obs_names = "bleeding"
colnames_emis_mean = paste0("emis_",hsmm_b$obs_names,"_mean")
k = match(colnames_emis_mean, colnames(hsmm_b$states))
colnames_emis_sigma = paste0("emis_",hsmm_b$obs_names,"_sigma")
l = match(colnames_emis_sigma, colnames(hsmm_b$states))
hsmm_b$emission = list(mu = c(
as.numeric(hsmm_b$states[1,k]), # M
as.numeric(hsmm_b$states[2,k]), # C
as.numeric(hsmm_b$states[3,k]) # LBI
),
sigma = c(
hsmm_b$states[1,l], # M
hsmm_b$states[2,l], # C
hsmm_b$states[3,l] # LBI
))
sojourn = data.frame()
# menses
M_gammafit = gammafit(x = FAM_agg_sojourn$n_days[FAM_agg_sojourn$hsmm_states == "M"])
sojourn = rbind(sojourn, data.frame(shape =  as.numeric(M_gammafit$shape), scale =  as.numeric(M_gammafit$scale)))
# cycles
C_gammafit = gammafit(x = CYCLES$length - mean(FAM_agg_sojourn$n_days[FAM_agg_sojourn$hsmm_states == "M"]))
sojourn = rbind(sojourn, data.frame(shape =  as.numeric(C_gammafit$shape), scale =  as.numeric(C_gammafit$scale)))
# LBI
# LBI_gammafit = gammafit(x = sample(
#   rep(56:2000,round(100000*dnorm(1:length(56:2000), m = 1000, sd = 1000))),
#       10000,
#       replace = TRUE))
LBI_gammafit = gammafit(x = sample(120:500,10000,replace = TRUE))
sojourn = rbind(sojourn, data.frame(shape =  as.numeric(LBI_gammafit$shape), scale =  as.numeric(LBI_gammafit$scale)))
# HB
HB_gammafit = gammafit(x = sample(9:15,10000,replace = TRUE))
#sojourn = rbind(sojourn, data.frame(shape =  as.numeric(HB_gammafit$shape), scale =  as.numeric(HB_gammafit$scale)))
hsmm_b$states$sojourn = sojourn
x = 1:40
plot(dgamma(x = x, shape = M_gammafit$shape, scale = M_gammafit$scale),
type = "l", col = hsmm_b$states$colors[hsmm_b$states$abbr == "M"])
points(dgamma(x = x, shape = C_gammafit$shape, scale = C_gammafit$scale),
type = "l", col = hsmm_b$states$colors[hsmm_b$states$abbr == "C"])
#points(dgamma(x = x, shape = HB_gammafit$shape, scale = HB_gammafit$scale),
#       type = "l", col = hsmm_b$states$colors[hsmm_b$states$abbr == "HB"])
x = 1:2000
plot(dgamma(x = x, shape = LBI_gammafit$shape, scale = LBI_gammafit$scale),
type = "l", col = hsmm_b$states$colors[hsmm_b$states$abbr == "LBI"])
abline(v = 56)
bleeding_cycles_model =  hsmmspec(
init = hsmm_b$init,
trans = hsmm_b$trans_no_names,
parms.emission = hsmm_b$emission,
sojourn = list(shape = hsmm_b$states$sojourn$shape, scale = hsmm_b$states$sojourn$scale, type = "gamma"),
dens.emission = dnorm.hsmm,
rand.emission = rnorm.hsmm,
mstep = mstep.norm)
set.seed(2)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
hsmm_b$trans_no_names
# Transition Probabilities
hsmm_b$trans =
matrix(rep(0, hsmm_b$n_states*hsmm_b$n_states),
nrow = hsmm_b$n_states,
dimnames = list(hsmm_b$states$abbr,hsmm_b$states$abbr))
hsmm_b$trans[which(hsmm_b$states$abbr == "M"),which(hsmm_b$states$abbr == "C")] = 1/(hsmm_b$n_states-1)
hsmm_b$trans[which(hsmm_b$states$abbr == "M"),which(hsmm_b$states$abbr == "LBI")] = 1/(hsmm_b$n_states-1)
hsmm_b$trans[which(hsmm_b$states$abbr == "C"),which(hsmm_b$states$abbr == "M")] = 1
hsmm_b$trans[which(hsmm_b$states$abbr == "LBI"),which(hsmm_b$states$abbr == "M")] = 1
hsmm_b$trans_no_names = hsmm_b$trans
colnames(hsmm_b$trans_no_names) = NULL
rownames(hsmm_b$trans_no_names) = NULL
bleeding_cycles_model =  hsmmspec(
init = hsmm_b$init,
trans = hsmm_b$trans_no_names,
parms.emission = hsmm_b$emission,
sojourn = list(shape = hsmm_b$states$sojourn$shape, scale = hsmm_b$states$sojourn$scale, type = "gamma"),
dens.emission = dnorm.hsmm,
rand.emission = rnorm.hsmm,
mstep = mstep.norm)
set.seed(2)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
sim_x = data.frame(sim$x)
colnames(sim_x) = hsmm_b$obs_names
sim_x$state_num = sim$s
sim_x$state_abbr = hsmm_b$states$abbr[sim$s]
sim_x$day = 1:nrow(sim_x)
sim_x_long = melt(sim_x, id.vars = c("state_num","state_abbr","day"))
ggplot(sim_x_long, aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = factor(state_abbr, levels = hsmm_b$states$abbr)))+
scale_color_manual(values = hsmm_b$states$colors)+
facet_grid(variable ~ ., scale = "free")+
ggtitle("Simulated sequence")
set.seed(1)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
sim_x = data.frame(sim$x)
colnames(sim_x) = hsmm_b$obs_names
sim_x$state_num = sim$s
sim_x$state_abbr = hsmm_b$states$abbr[sim$s]
sim_x$day = 1:nrow(sim_x)
sim_x_long = melt(sim_x, id.vars = c("state_num","state_abbr","day"))
ggplot(sim_x_long, aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = factor(state_abbr, levels = hsmm_b$states$abbr)))+
scale_color_manual(values = hsmm_b$states$colors)+
facet_grid(variable ~ ., scale = "free")+
ggtitle("Simulated sequence")
set.seed(3)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
sim_x = data.frame(sim$x)
colnames(sim_x) = hsmm_b$obs_names
sim_x$state_num = sim$s
sim_x$state_abbr = hsmm_b$states$abbr[sim$s]
sim_x$day = 1:nrow(sim_x)
sim_x_long = melt(sim_x, id.vars = c("state_num","state_abbr","day"))
ggplot(sim_x_long, aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = factor(state_abbr, levels = hsmm_b$states$abbr)))+
scale_color_manual(values = hsmm_b$states$colors)+
facet_grid(variable ~ ., scale = "free")+
ggtitle("Simulated sequence")
set.seed(4)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
sim_x = data.frame(sim$x)
colnames(sim_x) = hsmm_b$obs_names
sim_x$state_num = sim$s
sim_x$state_abbr = hsmm_b$states$abbr[sim$s]
sim_x$day = 1:nrow(sim_x)
sim_x_long = melt(sim_x, id.vars = c("state_num","state_abbr","day"))
ggplot(sim_x_long, aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = factor(state_abbr, levels = hsmm_b$states$abbr)))+
scale_color_manual(values = hsmm_b$states$colors)+
facet_grid(variable ~ ., scale = "free")+
ggtitle("Simulated sequence")
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 1, graphical = FALSE, debug = TRUE)
toc()
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_viterbi$s]
table(predicted_states)
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
rle(predicted_states)
# Transition Probabilities
hsmm_b$trans =
matrix(rep(0, hsmm_b$n_states*hsmm_b$n_states),
nrow = hsmm_b$n_states,
dimnames = list(hsmm_b$states$abbr,hsmm_b$states$abbr))
hsmm_b$trans[which(hsmm_b$states$abbr == "M"),which(hsmm_b$states$abbr == "C")] = 0.8
hsmm_b$trans[which(hsmm_b$states$abbr == "M"),which(hsmm_b$states$abbr == "LBI")] = 0.2
hsmm_b$trans[which(hsmm_b$states$abbr == "C"),which(hsmm_b$states$abbr == "M")] = 1
hsmm_b$trans[which(hsmm_b$states$abbr == "LBI"),which(hsmm_b$states$abbr == "M")] = 1
hsmm_b$trans_no_names = hsmm_b$trans
colnames(hsmm_b$trans_no_names) = NULL
rownames(hsmm_b$trans_no_names) = NULL
bleeding_cycles_model =  hsmmspec(
init = hsmm_b$init,
trans = hsmm_b$trans_no_names,
parms.emission = hsmm_b$emission,
sojourn = list(shape = hsmm_b$states$sojourn$shape, scale = hsmm_b$states$sojourn$scale, type = "gamma"),
dens.emission = dnorm.hsmm,
rand.emission = rnorm.hsmm,
mstep = mstep.norm)
set.seed(4)
sim = simulate.hsmmspec(bleeding_cycles_model, nsim = 5)
sim_x = data.frame(sim$x)
colnames(sim_x) = hsmm_b$obs_names
sim_x$state_num = sim$s
sim_x$state_abbr = hsmm_b$states$abbr[sim$s]
sim_x$day = 1:nrow(sim_x)
sim_x_long = melt(sim_x, id.vars = c("state_num","state_abbr","day"))
ggplot(sim_x_long, aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = factor(state_abbr, levels = hsmm_b$states$abbr)))+
scale_color_manual(values = hsmm_b$states$colors)+
facet_grid(variable ~ ., scale = "free")+
ggtitle("Simulated sequence")
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 1, graphical = FALSE, debug = TRUE)
toc()
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_viterbi$s]
table(predicted_states)
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
as.data.frame(rle(predicted_states))
as.data.frame(rle(predicted_states))
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
bleeding_cycles_model_f$model$d
matplot(bleeding_cycles_model_f$model$d)
matplot(bleeding_cycles_model_f$model$d, type = "lk")
matplot(bleeding_cycles_model_f$model$d, type = "l")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predict_sim_smoothed$s
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
obs = full_obs[496:1000,]
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 1, graphical = FALSE, debug = TRUE)
toc()
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
obs$gap_num = obs$gap
obs$gap = 1*(obs$gap_num >= 30)
obs$day = 1:nrow(obs)
newdata = list(N  = nrow(obs), x = as.matrix(obs[,match(hsmm$obs_names, colnames(obs))]))
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 1, graphical = FALSE, debug = TRUE)
toc()
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm$states$abbr
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm_b$states$abbr
probs$day = 1:nrow(probs)
probs_l = melt(probs, id.vars = "day")
colnames(probs_l) = c("day","state","p")
ggplot(probs_l, aes(x = day, y= p, col = state))+
geom_line()+
scale_color_manual(values = hsmm$states$colors)
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm_b$states$abbr
probs$day = 1:nrow(probs)
probs_l = melt(probs, id.vars = "day")
colnames(probs_l) = c("day","state","p")
ggplot(probs_l, aes(x = day, y= p, col = state))+
geom_line()+
scale_color_manual(values = hsmm_b$states$colors)
obs = full_obs[1:1000,]
obs$gap_num = obs$gap
obs$gap = 1*(obs$gap_num >= 30)
obs$day = 1:nrow(obs)
newdata = list(N  = nrow(obs), x = as.matrix(obs[,match(hsmm$obs_names, colnames(obs))]))
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 10, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 10, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 2, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 3, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 4, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 5, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 6, graphical = FALSE, debug = TRUE)
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 5, graphical = FALSE, debug = TRUE)
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 3, graphical = FALSE, debug = TRUE)
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm_b$states$abbr
probs$day = 1:nrow(probs)
probs_l = melt(probs, id.vars = "day")
colnames(probs_l) = c("day","state","p")
ggplot(probs_l, aes(x = day, y= p, col = state))+
geom_line()+
scale_color_manual(values = hsmm_b$states$colors)
predicted_states  = hsmm_b$states$abbr[predict_sim_viterbi$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm_b$states$abbr
probs$day = 1:nrow(probs)
probs_l = melt(probs, id.vars = "day")
colnames(probs_l) = c("day","state","p")
ggplot(probs_l, aes(x = day, y= p, col = state))+
geom_line()+
scale_color_manual(values = hsmm_b$states$colors)
obs = full_obs[1000:2000,]
obs$gap_num = obs$gap
obs$gap = 1*(obs$gap_num >= 30)
obs$day = 1:nrow(obs)
tic()
newdata = list(N  = nrow(obs), x = as.matrix(obs[,"bleeding"]))
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 3, graphical = FALSE, debug = TRUE)
toc()
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
bleeding_cycles_model_f = hsmmfit(x = newdata, model = bleeding_cycles_model, lock.d = TRUE, lock.transition = TRUE, maxit = 1, graphical = FALSE, debug = TRUE)
predict_sim_viterbi = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "viterbi")
predict_sim_smoothed = predict(object = bleeding_cycles_model_f, newdata = newdata, method = "smoothed")
predicted_states  = hsmm_b$states$abbr[predict_sim_viterbi$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
predicted_states  = hsmm_b$states$abbr[predict_sim_smoothed$s]
table(predicted_states)
data.frame(rle(predicted_states)$values,rle(predicted_states)$lengths )
obs$predicted_states_b = predicted_states
obs_long = melt(as.data.frame(obs), id.vars = c("date","day","predicted_states_b"))
ggplot(obs_long[obs_long$variable %in% c("bleeding","anylog","first_day"),], aes(x = day, y = value))+
geom_line()+
geom_point(aes(col = predicted_states_b), size = 1)+
facet_grid(variable ~ ., scale = "free")
probs = as.data.frame(predict_sim_smoothed$p)
colnames(probs) = hsmm_b$states$abbr
probs$day = 1:nrow(probs)
probs_l = melt(probs, id.vars = "day")
colnames(probs_l) = c("day","state","p")
ggplot(probs_l, aes(x = day, y= p, col = state))+
geom_line()+
scale_color_manual(values = hsmm_b$states$colors)
head(obs)
j = (obs$bleeding > 0)
j = which(obs$bleeding > 0)
j
diff(obs$date[j])
diff(obs$date[j]) > 7
j[diff(obs$date[j]) > 7]
j[diff(obs$date[j]) %in% 8:56]
obs$cycle = NA
j = which(obs$bleeding > 0)
obs$cycle[j[diff(obs$date[j]) %in% 8:56]] = "C"
obs$cycle[j[diff(obs$date[j]) > 56]] = "LBI"
obs
plot(obs$date, obs$bleeding, type = "l")
plot(obs$bleeding, type = "l")
points(obs$bleeding, type = "p", pch = 16, col = rank(obs$cycle))
unique(rank(obs$cycle))
points(obs$bleeding, type = "p", pch = 16, col = obs$cycle)
points(obs$bleeding, type = "p", pch = 16, col = as.numeric(obs$cycle))
plot(obs$bleeding, type = "l")
points(obs$bleeding, type = "p", pch = 16, col = as.numeric(obs$cycle))
points(obs$bleeding, type = "p", pch = 16, col = c(1,2)[match(obs$cycle, c("C","LBI"))])
match(obs$cycle, c("C","LBI")
)
plot(obs$bleeding, type = "l")
points(obs$bleeding, type = "p", pch = 16, col = c(1,2)[match(obs$cycle, c("C","LBI"))])
diff(obs$date[j])
j = which(obs$bleeding > 0)
j
obs$cycle = replace_NAs_with_latest_value(obs$cycle)
plot(obs$bleeding, type = "l")
points(obs$bleeding, type = "p", pch = 16, col = c(1,2)[match(obs$cycle, c("C","LBI"))])
> diff(obs$date[j])
d
input_folder = paste0(IO$output_data,"Days/")
output_folder = paste0(IO$tmp_data,"Days_with_data_prep_for_semi_markov/")
if(!dir.exists(output_folder)){dir.create(output_folder)}
days_files = list.files(input_folder)
file = days_files[1]
cat(file, "\n")
days = read_feather(paste0(input_folder,file))
user_ids = unique(days$user_id)
user = user_ids[10]
#cat(user,"\n")
j = which(days$user_id == user)
d = days[j,]
d
dim(d)
j = which(!is.na(d$date))
d = d[j,]
o = order(d$user_id, d$date)
d = d[o,]
dates = d$date
d$bleeding = extract_bleeding(d)
extract_bleeding = function(d){
bleeding = 0*d$menstruation
bleeding[which(d$spotting == "True")] = 1
bleeding[which(d$menstruation > 0)] = d$menstruation[which(d$menstruation > 0)] + 1
if(max(bleeding, na.rm = TRUE)>0){bleeding = bleeding/max(bleeding)}
return(bleeding)
}
d$bleeding = extract_bleeding(d)
select(d, date, bleeding )
cycle = NA
j = c(1,which(d$bleeding > 0))
cycle = rep(NA, nrow(d))
j = c(1,which(d$bleeding > 0))
j
d$bleeding
which(d$bleeding > 0)
cycle = rep(NA, nrow(d))
cycle
j = which(d$bleeding > 0)
j
diff_date = diff(obs$date[j])
diff_date
j = which(!is.na(d$date))
d = d[j,]
o = order(d$user_id, d$date)
d = d[o,]
unique(d$user_id)
dates = d$date
d$bleeding = extract_bleeding(d)
unique(d$bleeding)
d$menstruation
cycle = rep(NA, nrow(d))
cycle
j = which(d$bleeding > 0)
j
diff_date = diff(obs$date[j])
diff_date
diff_date = diff(d$date[j])
ddiff_date
diff_date
cycle[j[diff_date %in% 8:56]] = "C"
cycle[j[diff_date > 56]] = "LBI"
plot(d$bleeding, type = "l")
points(d$bleeding, type = "p",pch = 16, col = match(cycle, c("C","LBI")))
cycle = rep(NA, nrow(d))
j = which(d$bleeding > 0)
diff_date = diff(d$date[j])
cycle[j[diff_date %in% 8:56]] = "C"
cycle[j[diff_date > 56]] = "LBI"
plot(d$bleeding, type = "l")
points(d$bleeding, type = "p",pch = 16, col = match(cycle, c("C","LBI")))
diff_date %in% 8:56
j[diff_date %in% 8:56]
diff_date
cycle = rep(NA, nrow(d))
j = which(d$bleeding > 0)
diff_date = diff(d$date[j])
cycle[j[which(diff_date %in% 8:56)+1]] = "C"
cycle[j[which(diff_date > 56)+1]] = "LBI"
cycle = replace_NAs_with_latest_value(obs$cycle)
plot(d$bleeding, type = "l")
points(d$bleeding, type = "p",pch = 16, col = match(cycle, c("C","LBI")))
plot(d$bleeding, type = "l")
points(d$bleeding, type = "p",pch = 16, col = match(cycle, c("C","LBI")))
cycle = rep(NA, nrow(d))
j = which(d$bleeding > 0)
diff_date = diff(d$date[j])
cycle[j[which(diff_date %in% 8:56)+1]] = "C"
cycle[j[which(diff_date > 56)+1]] = "LBI"
plot(d$bleeding, type = "l")
points(d$bleeding, type = "p",pch = 16, col = match(cycle, c("C","LBI")))
j[which(diff_date %in% 8:56)+1]
diff_date = diff(d$date[j])
diff_date
